// EstokIA - Inventory Management System
// Prisma schema for SQLite

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Enums
enum UserType {
  ADMIN
  OPERATOR
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
}

// Models
model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String
  type      UserType @default(OPERATOR)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  active    Boolean  @default(true)

  sales Sale[]

  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  products Product[]

  @@map("categories")
}

model Product {
  id                 Int      @id @default(autoincrement())
  name               String
  sku                String   @unique
  categoryId         Int?     @map("category_id")
  costPrice          Float?   @map("cost_price")
  sellingPrice       Float?   @map("selling_price")
  currentStock       Int      @default(0) @map("current_stock")
  minimumStock       Int      @default(0) @map("minimum_stock")
  alertThresholdDays Int      @default(7) @map("alert_threshold_days")
  unitOfMeasure      String   @default("UN") @map("unit_of_measure")
  description        String?
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  active             Boolean  @default(true)

  category        Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  saleItems       SaleItem[]
  demandForecasts DemandForecast[]

  @@index([sku])
  @@index([categoryId])
  @@index([active])
  @@map("products")
}

model Sale {
  id          Int        @id @default(autoincrement())
  saleNumber  String     @unique @map("sale_number")
  userId      Int        @map("user_id")
  totalAmount Float      @default(0) @map("total_amount")
  status      SaleStatus @default(PENDING)
  saleDate    DateTime   @default(now()) @map("sale_date")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  user      User       @relation(fields: [userId], references: [id], onDelete: Restrict)
  saleItems SaleItem[]

  @@index([saleDate(sort: Desc)])
  @@index([status])
  @@index([userId])
  @@map("sales")
}

model SaleItem {
  id        Int      @id @default(autoincrement())
  saleId    Int      @map("sale_id")
  productId Int      @map("product_id")
  quantity  Int
  unitPrice Float    @map("unit_price")
  subtotal  Float
  createdAt DateTime @default(now()) @map("created_at")

  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([productId])
  @@index([saleId])
  @@map("sale_items")
}

model DemandForecast {
  id                 Int      @id @default(autoincrement())
  productId          Int      @map("product_id")
  daysToStockout     Int?     @map("days_to_stockout")
  averageDailyDemand Float?   @map("average_daily_demand")
  confidenceLevel    Float?   @map("confidence_level")
  historicalData     String?  @map("historical_data")
  calculationDate    DateTime @default(now()) @map("calculation_date")
  createdAt          DateTime @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([calculationDate(sort: Desc)])
  @@map("demand_forecasts")
}